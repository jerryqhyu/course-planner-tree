# Assignment 2 - Unit Tests for Course (Sample tests)
#
# CSC148 Fall 2014, University of Toronto
# Instructor: David Liu
# ---------------------------------------------
# STUDENT INFORMATION
#
# List your group members below, one per line, in format
# <full name>, <utorid>
# Chuanqi Sun, sunchuan
#
#
# ---------------------------------------------
"""Unit tests for course.py

Submit this file, containing *thorough* unit tests
for your code in course.py.
Note that you should not have any tests involving
standard input or output in here.
"""
import unittest
from course_sun import Course, UntakeableError, PrerequisiteError


class TestCourseInit(unittest.TestCase):
    def test_init_with_prereq(self):
        prereq1 = Course('CSC108')
        prereq2 = Course('CSC165')
        course = Course('CSC148', [prereq1, prereq2])
        self.assertEqual('CSC148', course.name)
        self.assertFalse(course.taken)
        self.assertEqual(course.prereqs, [prereq1, prereq2])


class TestCourseIsTakeable(unittest.TestCase):
    def setUp(self):
        self.c1 = Course('CSC108')
        self.c2 = Course('CSC148', [self.c1])

    def test_takeable_one_prereq_satisfied(self):
        self.c1.taken = True
        self.assertTrue(self.c2.is_takeable())


class TestCourseTake(unittest.TestCase):

    def setUp(self):
        self.c1 = Course('CSC108')
        self.c2 = Course('CSC148', [self.c1])

    def test_take_prereq_satisfied(self):
        self.c1.taken = True
        self.assertFalse(self.c2.taken)
        self.c2.take()
        self.assertTrue(self.c2.taken)


class TestCourseAddPrereq(unittest.TestCase):

    def setUp(self):
        self.c3 = Course('alone101')

    def test_add_prereq_no_prereqs(self):
        prereq = Course('MAT223')
        self.c3.add_prereq(prereq)
        self.assertEqual([prereq], self.c3.prereqs)


class TestCourseMissingPrereqs(unittest.TestCase):

    def setUp(self):
        self.c1 = Course('CSC108')
        self.c2 = Course('CSC148', [self.c1])

    def test_missing_prereqs_one_missing(self):
        self.assertEqual(['CSC108'], self.c2.missing_prereqs())
        
class TestCourseComplex(unittest.TestCase):
    def setUp(self):
        self.a000=Course("A000")
        self.c099=Course("CSC099")
        self.c100=Course("CSC100")
        self.c101=Course("CSC101")
        self.c102=Course("CSC102",[self.c099])
        self.c103=Course("CSC103")
        self.c104=Course("CSC104")
        self.c105=Course("CSC105")
        self.c200=Course("CSC200")
        self.c201=Course("CSC201",[self.c100])
        self.c202=Course("CSC202",[self.c101,self.c102])
        self.c203=Course("CSC203",[self.c103,self.c104,self.c105])
        self.c300=Course("CSC300",[self.c200,self.c201,self.c202])
        self.c301=Course("CSC301",[self.c203])
        self.c302=Course("CSC302")
        self.c400=Course("CSC400",[self.c300,self.c301,self.c302])
        
    def test_root_locate(self):
        self.assertEqual(self.c300,self.c400.root_locate("CSC300"))
        self.assertEqual(self.c400,self.c400.root_locate("CSC400"))
        self.assertEqual(self.c302,self.c400.root_locate("CSC302"))
        self.assertEqual(self.c099,self.c400.root_locate("CSC099"))
        self.assertEqual(self.c300,self.c400.root_locate("CSC300"))
        self.assertEqual(None,self.c400.root_locate("A100"))

    def test_take_and_is_takeable_and_missing_prereqs(self):
        """
        There are something wrong with the method assertRaises
        """
        self.c099.take()#will it be acted really?
        #self.assertRaises(self.c099.take())
        self.assertTrue(self.c102.is_takeable())
        self.c102.take()
        self.assertFalse(self.c102.is_takeable())
        self.assertFalse(self.c202.is_takeable())
        self.assertFalse(self.c202.is_takeable())
        self.assertTrue(self.c200.is_takeable())
        self.c200.take()
        self.c101.take()
        self.c202.take()
        self.assertFalse(self.c202.is_takeable())
        self.assertFalse(self.c300.is_takeable())
        self.c100.take()
        self.c201.take()
        self.assertTrue(self.c300.is_takeable())
        
        self.assertEqual([],self.c200.missing_prereqs())
        self.assertEqual([],self.c302.missing_prereqs())
        self.assertEqual([],self.c200.missing_prereqs())
        self.assertEqual([],self.c300.missing_prereqs())
        self.assertEqual(["CSC103","CSC104",'CSC105'],self.c203.missing_prereqs())
        self.assertEqual(['CSC103','CSC104','CSC105','CSC203'],self.c301.missing_prereqs())
        self.assertEqual(['CSC103','CSC104','CSC105','CSC203','CSC300','CSC301','CSC302'],self.c400.missing_prereqs())        
        
    def test_add_prereqs_and_check_prereq(self):
        self.temp400=Course("CSC400",self.c400.prereqs[:])
        self.temp301=Course("CSC301",self.c301.prereqs[:])
        self.temp202=Course("CSC202",self.c202.prereqs[:])
        self.temp101=Course("CSC101",self.c101.prereqs[:])
        #Why is there an error?
        #self.assertRaises(PrerequisiteError,self.c400.add_prereq(self.c300))
        #self.assertRaises(self.c400.add_prereq(self.c099))
        #self.assertRaises(self.c201.add_prereq(self.c300))
        #self.assertRaises(self.c201.add_prereq(self.c100))
        self.c400.add_prereq(self.a000)
        self.c301.add_prereq(self.a000)
        self.c202.add_prereq(self.a000)
        self.c101.add_prereq(self.a000)
        self.c400.prereqs.pop()
        self.c301.prereqs.pop()
        self.c202.prereqs.pop()
        self.c101.prereqs.pop()
        self.assertEqual(self.c400.name,self.temp400.name)
        self.assertEqual(self.c400.prereqs,self.temp400.prereqs)
        self.assertEqual(self.c301.name,self.temp301.name)
        self.assertEqual(self.c301.prereqs,self.temp301.prereqs)
        self.assertEqual(self.c202.name,self.temp202.name)
        self.assertEqual(self.c202.prereqs,self.temp202.prereqs)        
        self.assertEqual(self.c101.name,self.temp101.name)
        self.assertEqual(self.c101.prereqs,self.temp101.prereqs)    
    
        
if __name__ == '__main__':
    unittest.main(exit=False)
