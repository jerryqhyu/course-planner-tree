# Assignment 2 - Unit Tests for Course (Sample tests)
#
# CSC148 Fall 2014, University of Toronto
# Instructor: David Liu
# ---------------------------------------------
import unittest

from planner import TermPlanner, parse_course_data
from course_sun import Course, check_prereq

class TestParser(unittest.TestCase):

    def test_binary_simple(self):
        filename = 'binary_simple.txt'

        actual = parse_course_data(filename)
        self.assertEqual('CSC207', actual.name)

        prereqs = actual.prereqs
        prereq_names = [p.name for p in prereqs]
        # User assertCountEqual when order doesn't matter
        self.assertCountEqual(['CSC165', 'CSC148'], prereq_names)

        for p in prereqs:
            self.assertEqual([], p.prereqs)


class TestIsValid(unittest.TestCase):
    def setUp(self):

        # Single prereq
        self.single = TermPlanner('single.txt')

    def test_single_two(self):
        self.assertTrue(self.single.is_valid([['CSC108'], ['CSC148']]))


class TestPlanner(unittest.TestCase):
    def setUp(self):
        # Single prereq
        self.single = TermPlanner('single.txt')

    def gen_test(self, tp, courses):
        s = tp.generate_schedule(courses)
        # Uncomment this line if you implement good_schedule.
        #self.assertTrue(good_schedule(tp, s, courses))

    def test_one_prereq(self):
        self.gen_test(self.single, ['CSC108', 'CSC148'])

class TestComplexPlanner(unittest.TestCase):
    def setUp(self):
        self.s1=TermPlanner('mysample.txt')
    def test_init_and_parse_course_data(self):
        self.s1.course.name="CSC400"
        self.assertTrue('CSC300' in [self.s1.course.prereqs[0].name,self.s1.course.prereqs[1].name,self.s1.course.prereqs[2].name])
        self.assertTrue('CSC301' in [self.s1.course.prereqs[0].name,self.s1.course.prereqs[1].name,self.s1.course.prereqs[2].name])
        self.assertTrue('CSC302' in [self.s1.course.prereqs[0].name,self.s1.course.prereqs[1].name,self.s1.course.prereqs[2].name])
        c=self.s1.course.root_locate("CSC300")
        self.assertTrue('CSC200' in [c.prereqs[0].name,c.prereqs[1].name,c.prereqs[2].name])
        c=self.s1.course.root_locate("CSC202")
        self.assertTrue('CSC101' in [c.prereqs[0].name,c.prereqs[1].name])
        c=self.s1.course.root_locate("CSC203")
        self.assertTrue('CSC104' in [c.prereqs[0].name,c.prereqs[1].name,c.prereqs[2].name])
        
    def test_is_valid_course_located(self):
        self.assertTrue(self.s1.is_valid([[]]))#is this really true?
        self.assertTrue(self.s1.is_valid([[],[],[],[]]))
        self.assertTrue(self.s1.is_valid([['CSC099']]))
        self.assertTrue(self.s1.is_valid([['CSC099'],["CSC102"]]))
        self.assertFalse(self.s1.is_valid([['CSC099',"CSC102"]]))
        self.assertFalse(self.s1.is_valid([["CSC300"]]))
        self.assertFalse(self.s1.is_valid([["A000"]]))
        self.assertTrue(self.s1.is_valid([["CSC099",'CSC101','CSC103'],['CSC105','CSC104','CSC102','CSC100'],['CSC200','CSC201','CSC202'],['CSC203','CSC302','CSC300']]))
        self.assertFalse(self.s1.is_valid([["CSC099",'CSC101','CSC103'],['CSC105','CSC104','CSC102','CSC100','CSC099'],['CSC200','CSC201','CSC202'],['CSC203','CSC302','CSC300']]))
        self.assertFalse(self.s1.is_valid([["CSC099",'CSC101','CSC103'],['CSC105','CSC104','CSC102','CSC100','CSC103'],['CSC200','CSC201','CSC202'],['CSC203','CSC302','CSC300']]))
        self.assertFalse(self.s1.is_valid([["CSC099",'CSC101','CSC103'],['CSC105','CSC104','CSC100'],['CSC200','CSC201','CSC202'],['CSC203','CSC302','CSC300']]))
        
    def test_generate_schedule(self):
        self.assertTrue(self.s1.is_valid([['CSC099'],["CSC102"]]))
        
        self.assertEqual([],self.s1.generate_schedule(["CSC099",'CSC101','CSC103','CSC105','CSC104','CSC100','CSC200','CSC201','CSC202','CSC203','CSC302','CSC300']))
        self.assertEqual([[]],self.s1.generate_schedule([]))
        self.assertEqual([["CSC099"]],self.s1.generate_schedule(["CSC099"]))
        r2=self.s1.generate_schedule(["CSC099",'CSC103','CSC105','CSC104','CSC100','CSC200','CSC201','CSC202','CSC101','CSC203','CSC302','CSC300','CSC102'])
        self.assertTrue(self.s1.is_valid(r2))
        print("R2222222222222222:{}".format(r2))
"""
def good_schedule(tp, schedule, courses):
     (TermPlanner, list of (list of str)) -> bool
    Return True if schedule is an acceptable output
    of tp.generate_courses(courses).
    
    # Implement this function yourself if you want to use it!
"""

if __name__ == '__main__':
    unittest.main(exit=False)
